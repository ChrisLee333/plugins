#ifndef DOCKWIDGETDUMMYMOTOR_H
#define DOCKWIDGETDUMMYMOTOR_H

/**\file DockWidgetDummyMotor.h
* \brief In this file the class of the non modal dialog for the DummyMotor are specified
*
*\sa DockWidgetDummyMotor, DummyMotor
*\author Wolfram Lyda
*\date	Oct2011
*/
#include "common/sharedStructures.h"
#include "common/sharedStructuresQt.h"
#include "common/addInInterface.h"

#include "ui_dockWidgetDummyMotor.h"	//! Header-file generated by Qt-Gui-Editor which has to be called

#include <QtGui>
#include <qwidget.h>
#include <qmap.h>
#include <qstring.h>

//----------------------------------------------------------------------------------------------------------------------------------
/** @class DockWidgetDummyMotor
*   @brief Config dialog functionality of DummyMotor
*
*   This class is used for the non-modal dialog. It is used for displaying positions and positioning.
*	ui_dockWidgetDummyMotor.h is generated by the Gui-Editor.
*
*\sa DummyMotor
*/
class DockWidgetDummyMotor : public QWidget
{
    Q_OBJECT

    public:
        DockWidgetDummyMotor(QMap<QString, ito::Param> params, int uniqueID, ito::AddInActuator * myPlugin);	//!< Constructor called by DummyMotor::Constructor
        ~DockWidgetDummyMotor() {};

    private:
        Ui::DockWidgetDummyMotor ui;	//! Handle to the dialog
        int m_numaxis;					//! Number of axis
        void CheckAxisNums(QMap<QString, ito::Param> params);	//! This functions checks all axis after parameters has changed and blocks unspecified axis
        ito::AddInActuator *m_pMyPlugin;	//! Handle to the attached motor to enable / disable connections
        bool m_isVisible;

        void enableWidget(bool enabled);
        void visibleWidget();

    signals:
        void MoveRelative(const int axis, const double pos, ItomSharedSemaphore *waitCond = NULL);	//!< This signal is connected to DummyMotor::SetPosRel
        void MoveAbsolute(QVector<int> axis,  QVector<double> pos, ItomSharedSemaphore *waitCond = NULL); //!< This signal is connected to DummyMotor::SetPosAbs
        void MotorTriggerStatusRequest(bool sendActPosition, bool sendTargetPos);	//!< This signal is connected to DummyMotor::RequestStatusAndPosition

    public slots:
        void actuatorStatusChanged(QVector<int> status, QVector<double> positions); //!< slot to receive information about status and position changes.
        void valuesChanged(QMap<QString, ito::Param> params);	//!< Slot to recive the valuesChanged signal of Class DummyMotor
        void targetChanged(QVector<double> targetPos);

    private slots:
        void on_pushButton_xp_clicked();	//!< If the Botton "pushButton_xp" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_xm_clicked();	//!< If the Botton "pushButton_xm" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_yp_clicked();	//!< If the Botton "pushButton_yp" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_ym_clicked();	//!< If the Botton "pushButton_ym" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_down_clicked();	//!< If the Botton "pushButton_down" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_up_clicked();	//!< If the Botton "pushButton_up" is clicked a MoveRelative()-Signal is emitted

        void on_pushButton_ap_clicked();	//!< If the Botton "pushButton_ap" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_am_clicked();	//!< If the Botton "pushButton_am" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_bp_clicked();	//!< If the Botton "pushButton_bp" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_bm_clicked();	//!< If the Botton "pushButton_bm" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_cp_clicked();	//!< If the Botton "pushButton_cp" is clicked a MoveRelative()-Signal is emitted
        void on_pushButton_cm_clicked();	//!< If the Botton "pushButton_cm" is clicked a MoveRelative()-Signal is emitted

        void on_pushButton_refresh_clicked();	//!< If this Button is clicked, a MotorTriggerStatusRequest() is emmited
        void on_pushButton_start_clicked();		//!< If this Button is clicked, a MoveAbsolute()-Signal is emmited
        void on_pushButton_stop_clicked();

        void on_checkBox_enablex_clicked();		//!< This button disables the current GUI-Elements for the specified axis
        void on_checkBox_enabley_clicked();		//!< This button disables the current GUI-Elements for the specified axis
        void on_checkBox_enablez_clicked();		//!< This button disables the current GUI-Elements for the specified axis
        void on_checkBox_enablea_clicked();		//!< This button disables the current GUI-Elements for the specified axis
        void on_checkBox_enableb_clicked();		//!< This button disables the current GUI-Elements for the specified axis
        void on_checkBox_enablec_clicked();		//!< This button disables the current GUI-Elements for the specified axis
};

#endif
