/* ********************************************************************
    Plugin "DummyMotor" for itom software
    URL: http://www.uni-stuttgart.de/ito
    Copyright (C) 2015, Institut fuer Technische Optik (ITO),
    Universitaet Stuttgart, Germany

    This file is part of a plugin for the measurement software itom.
  
    This itom-plugin is free software; you can redistribute it and/or modify it
    under the terms of the GNU Library General Public Licence as published by
    the Free Software Foundation; either version 2 of the Licence, or (at
    your option) any later version.

    itom and its plugins are distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library
    General Public Licence for more details.

    You should have received a copy of the GNU Library General Public License
    along with itom. If not, see <http://www.gnu.org/licenses/>.
*********************************************************************** */

#ifndef DOCKWIDGETDUMMYMOTOR_H
#define DOCKWIDGETDUMMYMOTOR_H

/**\file DockWidgetDummyMotor.h
* \brief In this file the class of the non modal dialog for the DummyMotor are specified
*
*\sa DockWidgetDummyMotor, DummyMotor
*\author Wolfram Lyda
*\date    Oct2011
*/
#include "common/abstractAddInDockWidget.h"
#include "common/addInInterface.h"

#include <qmap.h>
#include <qstring.h>
#include <qpushbutton.h>
#include <qspinbox.h>

#include "ui_dockWidgetDummyMotor.h"    //! Header-file generated by Qt-Gui-Editor which has to be called


//----------------------------------------------------------------------------------------------------------------------------------
/** @class DockWidgetDummyMotor
*   @brief Config dialog functionality of DummyMotor
*
*   This class is used for the non-modal dialog. It is used for displaying positions and positioning.
*    ui_dockWidgetDummyMotor.h is generated by the Gui-Editor.
*
*\sa DummyMotor
*/
class DockWidgetDummyMotor : public ito::AbstractAddInDockWidget
{
    Q_OBJECT

    public:
        DockWidgetDummyMotor(int uniqueID, ito::AddInActuator * myPlugin);    //!< Constructor called by DummyMotor::Constructor
        ~DockWidgetDummyMotor() {};

    private:
        Ui::DockWidgetDummyMotor ui;    //! Handle to the dialog
        int m_numaxis;                    //! Number of axis
        bool m_isVisible;

        void enableWidget(bool enabled);
        void visibleWidget();

        QVector<QPushButton*> m_btnRelDec;
        QVector<QPushButton*> m_btnRelInc;
        QVector<QCheckBox*> m_checkEnabled;
        QVector<QDoubleSpinBox*> m_spinCurrentPos;
        QVector<QDoubleSpinBox*> m_spinTargetPos;
        QVector<QLabel*> m_labels;


    public slots:
        void parametersChanged(QMap<QString, ito::Param> params);
        void identifierChanged(const QString &identifier) {};
        
        void actuatorStatusChanged(QVector<int> status, QVector<double> actPosition);
        void targetChanged(QVector<double> targetPositions);

    private slots:

        void btnRelDecClicked();                //slot if any button for a relative, negative movement is clicked
        void btnRelIncClicked();                //slot if any button for a relative, positive movement is clicked
        void checkEnabledClicked(bool checked); //slot if any "enabled"-checkbox is clicked

        void on_pushButton_refresh_clicked();    //!< If this Button is clicked, a MotorTriggerStatusRequest() is emmited
        void on_pushButton_start_clicked();        //!< If this Button is clicked, a MoveAbsolute()-Signal is emmited
        void on_pushButton_stop_clicked();

};

#endif
