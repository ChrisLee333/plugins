#ifndef DOCKWIDGETAEROTECHENSEMBLE_H
#define DOCKWIDGETAEROTECHENSEMBLE_H

/**\file aerotechEnsemble.h
* \brief In this file the class of the non modal dialog for the AerotechEnsemble are specified
* 
*/
#include "common/sharedStructures.h"
#include "common/sharedStructuresQt.h"

#include "ui_dockWidgetAerotechEnsemble.h"    //! Header-file generated by Qt-Gui-Editor which has to be called

#include <QtGui>
#include <qwidget.h>
#include <qmap.h>
#include <qstring.h>
#include <qvector.h>

namespace ito //Forward-Declaration
{
    class AddInActuator;
}

//----------------------------------------------------------------------------------------------------------------------------------
class DockWidgetAerotechEnsemble : public QWidget
{
    Q_OBJECT
    public:
        DockWidgetAerotechEnsemble(QMap<QString, ito::Param> params, int uniqueID, ito::AddInActuator *actuator); //, ito::AddInActuator * myPlugin);    //!< Constructor called by AerotechEnsemble::Constructor
        ~DockWidgetAerotechEnsemble() {};

    private:
        Ui::DockWidgetAerotechEnsemble ui;    //! Handle to the dialog
        ito::AddInActuator *m_actuator;

//        int m_numaxis;                    //! Number of axis
        void CheckAxisNums(QMap<QString, ito::Param> params);    //! This functions checks all axis after parameters has changed and blocks unspecified axis
        //ito::AddInActuator *m_pMyPlugin;    //! Handle to the attached motor to enable / disable connections
//        bool m_isVisible;

        void enableWidget(bool enabled);
        void setAxisVisible(int numaxis);
//        void visibleWidget();

        /*QVector<QCheckBox*> m_pWidgetEnabled;
        QVector<QDoubleSpinBox*> m_pWidgetActual;
        QVector<QDoubleSpinBox*> m_pWidgetTarget;
        QVector<QPushButton*> m_pWidgetPosInc;
        QVector<QPushButton*> m_pWidgetPosDe;*/

    signals:
        void MoveRelative(const int axis, const double pos, ItomSharedSemaphore *waitCond = NULL);    //!< This signal is connected to SetPosRel
//        void setAbsTargetDegree(double target1, double target2, double target3);
//        void setRelTargetDegree(unsigned int axisNo, double relStepDegree);
        void MotorTriggerStatusRequest(bool sendActPosition, bool sendTargetPos);    //!< This signal is connected to RequestStatusAndPosition
        void MoveAbsolute(QVector<int> axis,  QVector<double> pos, ItomSharedSemaphore *waitCond = NULL); //!< This signal is connected to SetPosAbs

    public slots:
        void valuesChanged(QMap<QString, ito::Param> params);    //!< Slot to recive the valuesChanged signal
        void init(QMap<QString, ito::Param> params, QStringList axisNames);
//        void basicInformationChanged(QString name, QString id, QString axis, QVector<bool> available);
        void actuatorStatusChanged(QVector<int> status, QVector<double> actPosition); //!< slot to receive information about status and position changes.
        void targetChanged(QVector<double> targetPositions);

    private slots:
        void on_cb0_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb1_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb2_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb3_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb4_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb5_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb6_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb7_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb8_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_cb9_Name_clicked();        //!< This button disables the current GUI-Elements for the specified axis
        void on_pb0_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb0_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb1_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb1_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb2_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb2_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb3_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb3_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb4_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb4_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb5_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb5_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb6_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb6_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb7_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb7_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb8_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb8_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb9_Add_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb9_Sub_clicked();         //!< If the Botton is clicked a MoveRelative()-Signal is emitted
        void on_pb_Start_clicked();
        void on_pb_Stop_clicked();
        void on_pb_Refresh_clicked();
};

#endif
